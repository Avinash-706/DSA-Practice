1. Binary Array                       - Partition of QuickSort
2. Array with three values            -  Partition of QuickSort
3. Array of size n and small ranged values(100 - 200)        - Counting Sort | T.C. - O(n + k) | S.C. - O(k) Extra Space
4. Array of size n and range is of size n² and n³ or closer  - Radix Sort | T.C. - O(n) | S.C. - O(n)  Extra Space
5. Array of uniformly distributed data over a range          - Bucket Sort
6. When memory writes are costly      - Selection Sort | Cycle Sort
7. When adjacent swaps are allowed    - Bubble Sort | CockTail Sort ✅ (traverse from both the sides)
8. When array size is small           - Selection Sort | Insertion Sort ✅
9. When avaible extra memory is less  - Shell Sort - O(n (log n)²)


General Purpose Sorting Algorithms
1. Merge Sort - Stable Sort Algorithm | Works Greatly For LinkedList | work great for tape drives | Follows Divide and Conquer | Parallel Sorting
2. Heap Sort  - In-Place Sorting | Not Stable | Good For Priority Queues | Suitable When Constant Space is Required
3. Quick Sort - Fastest Among Above | Follows Divide and Conquer | Parallel Sorting | In-Place But Not Stable | Performs Well On Average Cases

Hybrid Algorithms (Used in Libraries) 
1. Tim Sort   - Mix of Insertion & Merge Sort | Uses Merge Sort for General Input | Uses Insertion Sort when - Inputs is Small OR Get Small in Recursive Calls   
2. Intro Sort - Mix of Quick, Heap & Insertion Sort | Uses Quick Sort for General Input | When Number of Recursive Calls Crosses (log n) -> Heap Sort | When Array Size is Small Insertion Sort


Sort in C++        -> Intro Sort
Worst Case &          Generally Uses QuickSort 
Average Case          If QuickSort is doing unfair partitioning(if more than n log n time) - switches to Heap Sort 
(n log n)             When Size of the Array is very small - switches to Insertion Sort         


Stable Sort in C++ -> Merge Sort ✅ | Tim Sort |
                      std::stable_sort (Uses Intro Sort and ensures stability by switching to Merge Sort when needed) 
                      Useful when order of equal elements needs to be preserved

     DEFINATION    -> A sorting algorithm is considered stable if it maintains the relative order of records with equal keys. 
                      In simpler terms, if two elements have the same value, their original order in the input array will be preserved in the output array.


 STABLE  SORT EXAMPLE   -> Bubble   , Insertion, Merge Sort
UNSTABLE SORT EXAMPLE   -> Selection,     Quick, Heap  Sort


BUBBLE SORT        -> Comparison-based algorithm | Best Case - O(n), Average & Worst Case - O(n²)
                   -> Optimized Version Breaks Early if Array is Already Sorted ✅
                   -> Stable Algorithm ✅
                   -> In-Place Algorithm - DOESN'T REQUIRE any Extra Space for Sorting ✅


SELECTION SORT     -> Comparision based algorithm | All Case - O(n²)
                   -> Does Less Memory Write Compare to Other Algorithms ✅
                   -> Exception: CYCLE SORT - more optimal than Selection Sort in terms of Memory Write
                   -> Heap Sort idea is Based on Selection Sort only ✅
                   -> Not Stable Algorithm ❌
                   -> In-Place Algorithm - DON'T REQUIRE any Extra Space for Sorting ✅


INSERTION SORT     -> Comparison-based algorithm | Best Case - O(n), when array is already sorted | Worst Case & Average Case - O(n²), when array is reverse sorted
                   -> Used in pratice for Small Array (Tim Sort and Intro Sort)
                   -> Stable Algorithm
                   -> In-Place Algorithm


MERGE SORT         -> Comparison-based algorithm | All Cases - O(n log n) | 
                   -> Preferred for Sorting Linked Lists and External Sorting ✅
                   -> Stable Algorithm ✅
                   -> Not In-Place Algorithm - REQUIRES Extra Space for Sorting ❌


QUICK SORT         -> Comparison-based algorithm | Best case & Average Case - O(n log n) | Worst Case - O(n²)
                   -> Despite O(n²) it is 
                   -> 