Understanding Classes in C++

Fundamentals of Classes and Structures

In C++, a class is essentially an extension of a structure (struct)
with additional features such as data hiding and encapsulation. If
 a class is declared in public mode, it behaves similarly to a structure.

For example, in our code, we simply replaced 'struct' with 'class'
 and added the public access specifier. This small change allows us
  to implement data hiding by defining private data members.

Access Control in Classes

By default, all members inside a class are private. This means that:

- Private data members cannot be accessed directly by an object outside the class.
- They can only be accessed through public methods within the class.

Binding of Data Members and Member Functions

In a class, data members (variables) and member functions (methods) are internally linked.

- When a method is called using an object, it operates on the specific instance's data members.
- This encapsulation ensures data integrity and prevents unintended modifications from outside the class.

Constructor: Special Member Function

A constructor is a special function that is used for initializing an object's data 
members when the object is created.

- The constructor is always public.
- It has the same name as the class.
- It is called automatically when an object is instantiated.

Example:
class Student {
    public:
        Student() { // Constructor
            cout << "Constructor Called!" << endl;
        }
};

Destructor: Releasing Resources

A destructor is a special function used to release resources allocated by the object
before it goes out of scope.

- The destructor name is prefixed with a tilde (~).
- It does not take parameters or return values.
- It is called automatically when an object is destroyed.

Example:
class Student {
    public:
        ~Student() { // Destructor
            cout << "Destructor Called!" << endl;
        }
};

Order of Constructor and Destructor Calls

- Constructors are called in the order of object creation.
- Destructors are called in the reverse order of object creation 
  (i.e., last created, first destroyed).

Example:
class A {
    public:
        A() { cout << "Constructor of A\n"; }
        ~A() { cout << "Destructor of A\n"; }
};

int main() {
    A obj1, obj2; // obj1 is created first, then obj2
}

Output:
Constructor of A
Constructor of A
Destructor of A
Destructor of A

Conclusion

Classes provide data encapsulation, abstraction, and security by restricting 
direct access to data members.

- Constructors ensure proper initialization of objects.
- Destructors help in resource management.
- Encapsulation ensures that data can only be modified through controlled 
  functions, making programs more secure and manageable.


PADDING SIZE OF A CLASS / STRUCTURE:

Padding in a class or structure refers to the extra memory added by the compiler
to ensure proper alignment of data members for efficient access.

Key Points:
1. Padding occurs due to memory alignment – The compiler aligns data members
   based on their data type to prevent performance issues.
2. Different data types have different alignment requirements – For example, 'int'
   (4 bytes) may be aligned at a 4-byte boundary, whereas 'char' (1 byte) may cause
   padding if placed before an 'int'.
3. Padding increases the size of a structure/class – The actual memory occupied by
   a structure may be greater than the sum of individual data members due to 
   alignment constraints.


Example:
#include <iostream>
using namespace std;
struct Example {
    char a;   // 1 byte
    int b;    // 4 bytes
    char c;   // 1 byte
};
int main() {
    cout << "Size of struct: " << sizeof(Example) << " bytes\n";
    return 0;
}


Explanation:
• 'char a' takes 1 byte.
• 'int b' requires 4 bytes but must be aligned to a 4-byte boundary, so 3 bytes of
   padding are added after 'char a'.
• 'char c' takes 1 byte, but since structures align to the size of the largest member ('int' = 4 bytes), 3 more bytes of padding are added at the end.
• Total size = 4 (a + padding) + 4 (b) + 4 (c + padding) = 12 bytes.


Avoiding Padding (Packing Structures):
We can use '#pragma pack(1)' to disable padding and tightly pack members:


#pragma pack(1)
struct Packed {
    char a;
    int b;
    char c;
};
#pragma pack()


This reduces unnecessary padding, making the structure smaller but possibly slower due to misalignment.


Summary:
Padding ensures memory alignment for better performance.
Structures/classes can have extra padding bytes between members and at the end.
Packing structures removes padding but may lead to performance penalties.

